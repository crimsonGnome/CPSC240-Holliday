     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Add Float Array".
     3                                  ; This program will allow a user to input float numbers in an array of size 6, and display the contents. It will also add
     4                                  ; them together and display the result.
     5                                  ; Copyright (C) 2021 Johnson Tong.                                                                           *
     6                                  ;                                                                                                                           *
     7                                  ;This file is part of the software program "Add Float Array".
     8                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     9                                  ;version 3 as published by the Free Software Foundation.                                                                    *
    10                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
    11                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    12                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    13                                  ;****************************************************************************************************************************
    14                                  
    15                                  
    16                                  
    17                                  
    18                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    19                                  ;
    20                                  ;Author information
    21                                  ;  Author name: Johnson Tong
    22                                  ;  Author email: jt28@csu.fullerton.edu
    23                                  ;
    24                                  ;Program information
    25                                  ;  Program name: Add Float Array
    26                                  ;  Programming languages: Assembly, C++, C, bash
    27                                  ;  Date program began: 2021 March 10
    28                                  ;  Date of last update: 2021 March 21
    29                                  ;  Date of reorganization of comments: 2021 March 21
    30                                  ;  Files in this program: control.asm, main.c, display.cc, sum.asm, fill.asm, run.sh
    31                                  ;  Status: Finished.  The program was tested extensively with no errors in Tuffix 2020 Edition.
    32                                  ;
    33                                  ;This file
    34                                  ;   File name: control.asm
    35                                  ;   Language: X86 with Intel syntax.
    36                                  ;   Max page width: 132 columns
    37                                  ;   Assemble: nasm -f elf64 -l control.lis -o control.o control.asm
    38                                  ;   Link: g++ -m64 -no-pie -o addFloatArray.out control.o fill.o main.o sum.o display.o -std=c++17
    39                                  ;   Purpose: This is the central module that will direct calls to different functions including Display, sum, and fill.
    40                                  ;            Using those functions, the sum of all the elements in a user created array will be calculated and be
    41                                  ;            returned to the caller of this function (in main.c).
    42                                  ;========================================================================================================
    43                                  extern printf
    44                                  extern scanf
    45                                  extern fill
    46                                  extern Display
    47                                  extern sum
    48                                  
    49                                  global control
    50                                  
    51                                  segment .data
    52 00000000 57656C636F6D652074-     welcome_control db "Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Johnson Tong.",10,0
    52 00000009 6F20485341532E2054-
    52 00000012 686520616363757261-
    52 0000001B 637920616E64207265-
    52 00000024 6C696162696C697479-
    52 0000002D 206F66207468697320-
    52 00000036 70726F6772616D2069-
    52 0000003F 732067756172616E74-
    52 00000048 656564206279204A6F-
    52 00000051 686E736F6E20546F6E-
    52 0000005A 672E0A00           
    53 0000005E 546865206E756D6265-     present_numbers db "The numbers you entered are these: ",10,0
    53 00000067 727320796F7520656E-
    53 00000070 746572656420617265-
    53 00000079 2074686573653A200A-
    53 00000082 00                 
    54 00000083 5468652073756D206F-     the_sum_is db "The sum of these values is %.10lf.", 10 ,0
    54 0000008C 662074686573652076-
    54 00000095 616C75657320697320-
    54 0000009E 252E31306C662E0A00 
    55 000000A7 54686520636F6E7472-     exit_message db "The control module will now return the sum to the caller module.",10,0
    55 000000B0 6F6C206D6F64756C65-
    55 000000B9 2077696C6C206E6F77-
    55 000000C2 2072657475726E2074-
    55 000000CB 68652073756D20746F-
    55 000000D4 207468652063616C6C-
    55 000000DD 6572206D6F64756C65-
    55 000000E6 2E0A00             
    56                                  
    57                                  segment .bss  ;Reserved for uninitialized data
    58 00000000 <res 00000030>          the_array resq 6 ; array of 6 quad words reserved before run time.
    59                                  
    60                                  segment .text ;Reserved for executing instructions.
    61                                  
    62                                  control:
    63                                  
    64                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    65                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    66 00000000 55                      push rbp
    67 00000001 4889E5                  mov  rbp,rsp
    68 00000004 57                      push rdi                                                    ;Backup rdi
    69 00000005 56                      push rsi                                                    ;Backup rsi
    70 00000006 52                      push rdx                                                    ;Backup rdx
    71 00000007 51                      push rcx                                                    ;Backup rcx
    72 00000008 4150                    push r8                                                     ;Backup r8
    73 0000000A 4151                    push r9                                                     ;Backup r9
    74 0000000C 4152                    push r10                                                    ;Backup r10
    75 0000000E 4153                    push r11                                                    ;Backup r11
    76 00000010 4154                    push r12                                                    ;Backup r12
    77 00000012 4155                    push r13                                                    ;Backup r13
    78 00000014 4156                    push r14                                                    ;Backup r14
    79 00000016 4157                    push r15                                                    ;Backup r15
    80 00000018 53                      push rbx                                                    ;Backup rbx
    81 00000019 9C                      pushf                                                       ;Backup rflags
    82                                  
    83 0000001A 6A00                    push qword 0  ; remain on the boundary
    84                                  
    85                                  ;"Welcome to HSAS. The accuracy and reliability of this program is guaranteed by Johnson Tong."
    86 0000001C 6A00                    push qword 0
    87 0000001E B800000000              mov rax, 0
    88 00000023 48BF-                   mov rdi, welcome_control
    88 00000025 [0000000000000000] 
    89 0000002D E8(00000000)            call printf
    90 00000032 58                      pop rax
    91                                  
    92                                  ; Fill the array using the fill module
    93 00000033 6A00                    push qword 0
    94 00000035 B800000000              mov rax, 0
    95 0000003A 48BF-                   mov rdi, the_array ; array passed in as first param
    95 0000003C [0000000000000000] 
    96 00000044 BE06000000              mov rsi, 6         ; array size passed in as second param
    97 00000049 E8(00000000)            call fill
    98 0000004E 4989C7                  mov r15, rax
    99                                  ; pop rax
   100                                  
   101                                  ;"The numbers you entered are these: "
   102 00000051 6A00                    push qword 0
   103 00000053 B800000000              mov rax, 0
   104 00000058 48BF-                   mov rdi, present_numbers
   104 0000005A [5E00000000000000] 
   105 00000062 E8(00000000)            call printf
   106 00000067 58                      pop rax
   107                                  ; Display the numbers in the_array using the Display module
   108 00000068 6A00                    push qword 0
   109 0000006A B800000000              mov rax, 0
   110 0000006F 48BF-                   mov rdi, the_array
   110 00000071 [0000000000000000] 
   111 00000079 4C89FE                  mov rsi, r15
   112 0000007C E8(00000000)            call Display
   113 00000081 58                      pop rax
   114                                  ; Computing the sum...
   115 00000082 6A00                    push qword 0
   116 00000084 B800000000              mov rax, 0
   117 00000089 48BF-                   mov rdi, the_array
   117 0000008B [0000000000000000] 
   118 00000093 BE06000000              mov rsi, 6
   119 00000098 E8(00000000)            call sum ;The sum will be in xmm0
   120 0000009D F2440F10F8              movsd xmm15, xmm0
   121 000000A2 58                      pop rax
   122                                  
   123                                  ; The sum of these values is ....
   124 000000A3 6A00                    push qword 0
   125 000000A5 B801000000              mov rax, 1
   126 000000AA 48BF-                   mov rdi, the_sum_is
   126 000000AC [8300000000000000] 
   127 000000B4 F2410F10C7              movsd xmm0, xmm15
   128 000000B9 E8(00000000)            call printf
   129 000000BE 58                      pop rax
   130                                  
   131                                  ; The sum will be returned to the caller module
   132 000000BF 6A00                    push qword 0
   133 000000C1 B800000000              mov rax, 0
   134 000000C6 48BF-                   mov rdi, exit_message
   134 000000C8 [A700000000000000] 
   135 000000D0 E8(00000000)            call printf
   136 000000D5 58                      pop rax
   137                                  
   138 000000D6 58                      pop rax ; counter push at the beginning
   139                                  
   140 000000D7 F2410F10C7              movsd xmm0, xmm15
   141                                  ;===== Restore original values to integer registers ===================================================================
   142 000000DC 9D                      popf                                                        ;Restore rflags
   143 000000DD 5B                      pop rbx                                                     ;Restore rbx
   144 000000DE 415F                    pop r15                                                     ;Restore r15
   145 000000E0 415E                    pop r14                                                     ;Restore r14
   146 000000E2 415D                    pop r13                                                     ;Restore r13
   147 000000E4 415C                    pop r12                                                     ;Restore r12
   148 000000E6 415B                    pop r11                                                     ;Restore r11
   149 000000E8 415A                    pop r10                                                     ;Restore r10
   150 000000EA 4159                    pop r9                                                      ;Restore r9
   151 000000EC 4158                    pop r8                                                      ;Restore r8
   152 000000EE 59                      pop rcx                                                     ;Restore rcx
   153 000000EF 5A                      pop rdx                                                     ;Restore rdx
   154 000000F0 5E                      pop rsi                                                     ;Restore rsi
   155 000000F1 5F                      pop rdi                                                     ;Restore rdi
   156 000000F2 5D                      pop rbp                                                     ;Restore rbp
   157                                  
   158 000000F3 C3                      ret
   159                                  
   160                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
