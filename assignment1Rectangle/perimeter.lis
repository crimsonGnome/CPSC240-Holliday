     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Rectangle".  This program takes in the user input of height and width in float and calculates perimeter and average side length. Copyright (C) 2021 Johnson Tong.                                                                           *
     3                                  ;                                                                                                                           *
     4                                  ;This file is part of the software program "Rectangle".                                                                   *
     5                                  ;Rectangle is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;Rectangle is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;
    17                                  ;Author information
    18                                  ;  Author name: Johnson Tong
    19                                  ;  Author email: jt28@csu.fullerton.edu
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: Rectangle
    23                                  ;  Programming languages: One modules in C and one module in X86
    24                                  ;  Date program began: 2021 Feb 05
    25                                  ;  Date of last update: 2021 Feb 12
    26                                  ;
    27                                  ;  Files in this program: rectangle.c, perimeter.asm
    28                                  ;  Status: Finished.
    29                                  ;
    30                                  ;This file
    31                                  ;   File name: perimeter.asm
    32                                  ;   Language: X86 with Intel syntax.
    33                                  ;   Max page width: 132 columns
    34                                  ;   Assemble: nasm -f elf64 -l perimeter.lis -o perimeter.o perimeter.asm
    35                                  
    36                                  ;===== Begin code area ================================================================================================
    37                                  
    38                                  extern printf
    39                                  extern scanf
    40                                  global perimeter
    41                                  
    42                                  segment .data
    43 00000000 57656C636F6D652074-     welcome db "Welcome to a friendly assembly program by Johnson Tong",10,0
    43 00000009 6F206120667269656E-
    43 00000012 646C7920617373656D-
    43 0000001B 626C792070726F6772-
    43 00000024 616D206279204A6F68-
    43 0000002D 6E736F6E20546F6E67-
    43 00000036 0A00               
    44 00000038 546869732070726F67-     welcome2 db "This program will compute the perimeter and the average side length of a rectangle.", 10, 0
    44 00000041 72616D2077696C6C20-
    44 0000004A 636F6D707574652074-
    44 00000053 686520706572696D65-
    44 0000005C 74657220616E642074-
    44 00000065 686520617665726167-
    44 0000006E 652073696465206C65-
    44 00000077 6E677468206F662061-
    44 00000080 2072656374616E676C-
    44 00000089 652E0A00           
    45                                  
    46 0000008D 456E74657220746865-     input1prompt db "Enter the height: ",0
    46 00000096 206865696768743A20-
    46 0000009F 00                 
    47 000000A0 456E74657220746865-     input2prompt db "Enter the width: ", 0
    47 000000A9 2077696474683A2000 
    48                                  
    49 000000B2 256C6600                one_float_format db "%lf",0
    50 000000B6 256C6620256C662025-     three_float_format db "%lf %lf %lf", 0
    50 000000BF 6C6600             
    51                                  
    52 000000C2 54686520706572696D-     output_perimeter_float db "The perimeter is %.15lf.",10,0
    52 000000CB 657465722069732025-
    52 000000D4 2E31356C662E0A00   
    53 000000DC 546865206C656E6774-     output_average_float db "The length of the average side is %.15lf.", 10, 0
    53 000000E5 68206F662074686520-
    53 000000EE 617665726167652073-
    53 000000F7 69646520697320252E-
    53 00000100 31356C662E0A00     
    54                                  
    55 00000107 4920686F706520796F-     goodbye db "I hope you enjoyed your rectangle.",10,0
    55 00000110 7520656E6A6F796564-
    55 00000119 20796F757220726563-
    55 00000122 74616E676C652E0A00 
    56 0000012B 54686520617373656D-     goodbye2 db "The assembly program will send the perimeter to the main function.", 10,0
    56 00000134 626C792070726F6772-
    56 0000013D 616D2077696C6C2073-
    56 00000146 656E64207468652070-
    56 0000014F 6572696D6574657220-
    56 00000158 746F20746865206D61-
    56 00000161 696E2066756E637469-
    56 0000016A 6F6E2E0A00         
    57 0000016F 257300                  one_string_format db "%s", 0
    58                                  
    59 00000172 476F6F64206D6F726E-     welcome_output db "Good morning %s", 10,0
    59 0000017B 696E672025730A00   
    60                                  
    61 00000183 0000000000001040        four dq 4.0
    62                                  
    63                                  segment .bss
    64                                  
    65                                  segment .text
    66                                  
    67                                  perimeter:
    68                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    69                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    70 00000000 55                      push rbp
    71 00000001 4889E5                  mov  rbp,rsp
    72 00000004 57                      push rdi                                                    ;Backup rdi
    73 00000005 56                      push rsi                                                    ;Backup rsi
    74 00000006 52                      push rdx                                                    ;Backup rdx
    75 00000007 51                      push rcx                                                    ;Backup rcx
    76 00000008 4150                    push r8                                                     ;Backup r8
    77 0000000A 4151                    push r9                                                     ;Backup r9
    78 0000000C 4152                    push r10                                                    ;Backup r10
    79 0000000E 4153                    push r11                                                    ;Backup r11
    80 00000010 4154                    push r12                                                    ;Backup r12
    81 00000012 4155                    push r13                                                    ;Backup r13
    82 00000014 4156                    push r14                                                    ;Backup r14
    83 00000016 4157                    push r15                                                    ;Backup r15
    84 00000018 53                      push rbx                                                    ;Backup rbx
    85 00000019 9C                      pushf                                                       ;Backup rflags
    86                                  
    87                                  ;Registers rax, rip, and rsp are usually not backed up.
    88 0000001A 6A00                    push qword 0
    89                                  ; Display the welcome messages
    90 0000001C B800000000              mov rax, 0                  ;printf uses no data from xmm registers
    91 00000021 48BF-                   mov rdi, welcome            ;"Welcome to a friendly assembly program by Johnson Tong"
    91 00000023 [0000000000000000] 
    92 0000002B E8(00000000)            call printf
    93                                  
    94 00000030 6A00                    push qword 0
    95                                  
    96 00000032 4881EC00040000          sub rsp, 1024 ; make space for 1 string
    97 00000039 B800000000              mov rax, 0
    98 0000003E 48BF-                   mov rdi, one_string_format
    98 00000040 [6F01000000000000] 
    99 00000048 4889E6                  mov rsi, rsp
   100 0000004B 4889E2                  mov rdx, rsp
   101 0000004E 4881C200040000          add rdx, 1024
   102 00000055 E8(00000000)            call scanf
   103                                  
   104 0000005A B800000000              mov rax, 0
   105 0000005F 48BF-                   mov rdi, welcome_output
   105 00000061 [7201000000000000] 
   106 00000069 4889E6                  mov rsi, rsp
   107 0000006C E8(00000000)            call printf
   108                                  
   109 00000071 4881C400040000          add rsp, 1024
   110 00000078 58                      pop rax
   111                                  
   112 00000079 6A00                    push qword 0
   113 0000007B B800000000              mov rax, 0
   114 00000080 48BF-                   mov rdi, welcome2
   114 00000082 [3800000000000000] 
   115 0000008A E8(00000000)            call printf
   116 0000008F 58                      pop rax
   117                                  
   118                                  
   119 00000090 4881ECC0000000          sub rsp, 192
   120 00000097 B803000000              mov rax, 3 
   121 0000009C 48BF-                   mov rdi, three_float_format
   121 0000009E [B600000000000000] 
   122 000000A6 4889E6                  mov rsi, rsp
   123 000000A9 E8(00000000)            call scanf
   124                                  
   125 000000AE F2440F103C24            movsd xmm15, [rsp]  ; degrees
   126                                  
   127 000000B4 F2440F10742440          movsd xmm14, [rsp+64]  ; side 2
   128                                  
   129 000000BB F2440F10AC24800000-     movsd xmm13, [rsp+128]  ; side 1
   129 000000C4 00                 
   130 000000C5 4881C4C0000000          add rsp, 192
   131                                  
   132                                      ; push qword 0 ; just pretend this isn't here
   133                                  	
   134 000000CC 6A00                    	push qword 0 ; push 8 bytes to top of stack for storage
   135 000000CE 6A00                    	push qword 0
   136 000000D0 6A00                    	push qword 0
   137                                  	
   138 000000D2 48BF-                   	mov rdi, three_float_format ; move float format into first parameter register // rdi = "%lf %lf %lf"
   138 000000D4 [B600000000000000] 
   139 000000DC 4889E6                  	mov rsi, rsp ; <- second arg register now points to top of stack
   140 000000DF 4889E2                  	mov rdx, rsp
   141 000000E2 4883C208                	add rdx, qword 8 ; rdx points to second qword
   142 000000E6 4889E1                  	mov rcx, rsp
   143 000000E9 4883C110                	add rcx, qword 16 ; rcx points to third qword
   144 000000ED E8(00000000)            	call scanf ; scanf("%lf %lf %lf", rsp, rsp + 8, rsp + 16);
   145                                  	
   146 000000F2 F2440F103C24            	movsd xmm15, [rsp+0] ; dereference the data at the top of stack, store in xmm15 
   147 000000F8 F2440F10742408          	movsd xmm14, [rsp+8]
   148 000000FF F2440F106C2410          	movsd xmm13, [rsp+16]
   149                                  	
   150                                  	; [ ] are equivalent to *dereference in c++
   151                                  	
   152 00000106 58                      	pop rax ; restore stack, i.e. since we're done with the 8 bytes at the top, remove them
   153                                  	
   154                                  	; for the actual numbers
   155 00000107 58                      	pop rax
   156 00000108 58                      	pop rax 
   157                                  	; pop rax
   158                                  
   159                                  ;=========begin inputs for height and width===================
   160 00000109 6A00                    push qword 0
   161                                  ;Display a prompt message asking for inputs
   162 0000010B B800000000              mov rax, 0
   163 00000110 48BF-                   mov rdi, input1prompt         ;"Enter the height: "
   163 00000112 [8D00000000000000] 
   164 0000011A E8(00000000)            call printf
   165 0000011F 58                      pop rax
   166                                  
   167                                  ;Begin the scanf block
   168 00000120 6A00                    push qword 0
   169 00000122 B801000000              mov rax, 1
   170 00000127 48BF-                   mov rdi, one_float_format
   170 00000129 [B200000000000000] 
   171 00000131 4889E6                  mov rsi, rsp
   172 00000134 E8(00000000)            call scanf
   173 00000139 F2440F101424            movsd xmm10, [rsp]
   174 0000013F 58                      pop rax
   175                                  
   176 00000140 6A00                    push qword 0
   177                                  ;Display a prompt message asking for inputs
   178 00000142 B800000000              mov rax, 0
   179 00000147 48BF-                   mov rdi, input2prompt       ; "Enter the width: "
   179 00000149 [A000000000000000] 
   180 00000151 E8(00000000)            call printf
   181 00000156 58                      pop rax
   182                                  
   183                                  ;Begin the scanf block
   184 00000157 6A00                    push qword 0
   185 00000159 B801000000              mov rax, 1
   186 0000015E 48BF-                   mov rdi, one_float_format
   186 00000160 [B200000000000000] 
   187 00000168 4889E6                  mov rsi, rsp
   188 0000016B E8(00000000)            call scanf
   189 00000170 F2440F101C24            movsd xmm11, [rsp]
   190 00000176 58                      pop rax
   191                                  
   192                                  
   193                                  
   194                                  ;=================Calculate perimeter=====================
   195 00000177 F2450F10E2              movsd xmm12, xmm10             ; preserve the height
   196 0000017C F2450F10EB              movsd xmm13, xmm11             ; preserve the width
   197 00000181 F2450F58E3              addsd xmm12, xmm11
   198 00000186 F2450F58EA              addsd xmm13, xmm10
   199 0000018B F2450F58E5              addsd xmm12, xmm13
   200                                  
   201 00000190 6A00                    push qword 0
   202 00000192 B801000000              mov rax, 1
   203 00000197 F2410F10C4              movsd xmm0, xmm12
   204 0000019C 48BF-                   mov rdi, output_perimeter_float    ;"The perimeter is %.3lf."
   204 0000019E [C200000000000000] 
   205 000001A6 E8(00000000)            call printf
   206 000001AB 58                      pop rax
   207                                  
   208 000001AC F2450F10FC              movsd xmm15, xmm12                  ;save the perimeter before modifying
   209                                  ;=================Calculate average=======================
   210                                  ; two alternative ways to do the average
   211 000001B1 F2440F5E2425-           divsd xmm12, [four]
   211 000001B7 [83010000]         
   212                                  ; mov r8, 4
   213                                  ; cvtsi2sd xmm13, r8
   214                                  ; divsd xmm12, xmm13
   215                                  
   216 000001BB 6A00                    push qword 0
   217 000001BD B801000000              mov rax, 1
   218 000001C2 F2410F10C4              movsd xmm0, xmm12
   219 000001C7 48BF-                   mov rdi, output_average_float     ;"The length of the average side is %.3lf"
   219 000001C9 [DC00000000000000] 
   220 000001D1 E8(00000000)            call printf
   221 000001D6 58                      pop rax
   222                                  
   223 000001D7 6A00                    push qword 0
   224 000001D9 B800000000              mov rax, 0
   225 000001DE 48BF-                   mov rdi, goodbye       ; "I hope you enjoyed your rectangle."
   225 000001E0 [0701000000000000] 
   226 000001E8 E8(00000000)            call printf
   227 000001ED 58                      pop rax
   228                                  
   229 000001EE 6A00                    push qword 0
   230 000001F0 B800000000              mov rax, 0
   231 000001F5 48BF-                   mov rdi, goodbye2       ; "The assembly program will send the perimeter to the main function."
   231 000001F7 [2B01000000000000] 
   232 000001FF E8(00000000)            call printf
   233 00000204 58                      pop rax
   234                                  
   235 00000205 58                      pop rax
   236                                  
   237 00000206 F2410F10C7              movsd xmm0, xmm15
   238                                  ;===== Restore original values to integer registers ===================================================================
   239 0000020B 9D                      popf                                                        ;Restore rflags
   240 0000020C 5B                      pop rbx                                                     ;Restore rbx
   241 0000020D 415F                    pop r15                                                     ;Restore r15
   242 0000020F 415E                    pop r14                                                     ;Restore r14
   243 00000211 415D                    pop r13                                                     ;Restore r13
   244 00000213 415C                    pop r12                                                     ;Restore r12
   245 00000215 415B                    pop r11                                                     ;Restore r11
   246 00000217 415A                    pop r10                                                     ;Restore r10
   247 00000219 4159                    pop r9                                                      ;Restore r9
   248 0000021B 4158                    pop r8                                                      ;Restore r8
   249 0000021D 59                      pop rcx                                                     ;Restore rcx
   250 0000021E 5A                      pop rdx                                                     ;Restore rdx
   251 0000021F 5E                      pop rsi                                                     ;Restore rsi
   252 00000220 5F                      pop rdi                                                     ;Restore rdi
   253 00000221 5D                      pop rbp                                                     ;Restore rbp
   254                                  
   255 00000222 C3                      ret
